# -*- coding: utf-8 -*-
"""Submission_kedua_machine_learning_terapan.ipynb.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19qCz6MvI2ESV7dTbb-rSORgl1GYU4Uqu

# LIBRARY
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from collections import Counter
from sklearn.preprocessing import MultiLabelBinarizer, MinMaxScaler
import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Dense
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.metrics import precision_score

"""# LOAD DATA"""

game_df = pd.read_csv('https://raw.githubusercontent.com/dfin12/submission_kedua_machine_learning_trapan/refs/heads/main/steam.csv')

"""# EDA

Melihat tipe data dari setiap kolom
"""

game_df.info()

"""Melihat statistika deskriptif dari fitur numerik yang ada"""

game_df.describe()

"""Menampilkan 5 data teratas"""

game_df.head()

"""Melihat nilai kosong untuk setiap fitur"""

missing_values = game_df.isnull().sum()
columns_with_missing_values = missing_values[missing_values > 0]
columns_with_missing_values

"""Melihat adanya duplikasi pada data"""

duplicate_rows = game_df[game_df.duplicated()]
duplicate_rows

"""Visualisasi top 5 genre"""

all_genres = [genre for sublist in game_df['genres'].dropna().apply(lambda x: x.split(';')) for genre in sublist]
genre_counts = Counter(all_genres)
top_5_genres = genre_counts.most_common(5)
genres, counts = zip(*top_5_genres)

plt.figure(figsize=(8, 5))
bars = plt.bar(genres, counts, color='skyblue')
plt.title('Top 5 Genres')
plt.xlabel('Genre')
plt.ylabel('Jumlah Game')
plt.grid(axis='y')

for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, yval, int(yval), va='bottom') # va: vertical alignment

plt.show()

"""# PREPROCESSING DATA

Menghapus fitur yang tidak digunakan
"""

game_df_selected = game_df[['name', 'genres', 'steamspy_tags', 'price', 'positive_ratings', 'negative_ratings']].copy()
game_df_selected.dropna(inplace=True)

"""Ubah kolom tag dan genre menjadi list"""

for col in ['genres', 'steamspy_tags']:
    game_df_selected[col] = game_df_selected[col].apply(lambda x: x.split(';') if isinstance(x, str) else [])

"""Membuat kolom rating terintegrasi dan menghapus fitur positive_ratings dan negative_ratings"""

game_df_selected['ratings'] = game_df_selected['positive_ratings'] / (game_df_selected['positive_ratings'] + game_df_selected['negative_ratings'] + 1e-5)
game_df_selected.drop(['positive_ratings', 'negative_ratings'], axis=1, inplace=True)

"""Encoding fitur genres dan tag menggunakan miltilabel"""

mlb_genres = MultiLabelBinarizer()
mlb_tags = MultiLabelBinarizer()

genres_encoded = mlb_genres.fit_transform(game_df_selected['genres'])
tags_encoded = mlb_tags.fit_transform(game_df_selected['steamspy_tags'])

features = np.hstack((genres_encoded, tags_encoded))

"""Normalisasi fitur price dan rating"""

numerics = game_df_selected[['price', 'ratings']].values
scaler = MinMaxScaler()
numeric_scaled = scaler.fit_transform(numerics)

"""Final feature matriks"""

X = np.hstack((features, numeric_scaled))

"""# MODELING

Input dimensi
"""

input_dim = X.shape[1]
encoding_dim = 32

"""Membangun model Neural Network"""

input_layer = Input(shape=(input_dim,))
encoded = Dense(128, activation='relu')(input_layer)
encoded = Dense(64, activation='relu')(encoded)
embedding = Dense(encoding_dim, activation='relu', name='embedding')(encoded)
decoded = Dense(64, activation='relu')(embedding)
decoded = Dense(128, activation='relu')(decoded)
output_layer = Dense(input_dim, activation='sigmoid')(decoded)

autoencoder = Model(inputs=input_layer, outputs=output_layer)
encoder = Model(inputs=input_layer, outputs=embedding)

autoencoder.compile(optimizer='adam', loss='mse')
history = autoencoder.fit(X, X, epochs=20, batch_size=64, validation_split=0.2, callbacks=[EarlyStopping(patience=3, restore_best_weights=True)])

"""# EVALUATION & RECOMENDATION

Visualisasi loss
"""

plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Autoencoder Training Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.grid(True)
plt.show()

"""Ekstraksi embedding untuk seluruh game"""

game_embeddings = encoder.predict(X)

def recommend(game_name=None, genre=None, price_range=None, min_rating=None, top_k=20):
    filtered_indices = game_df_selected.index.tolist()

    if genre:
        filtered_indices = game_df_selected[game_df_selected['genres'].apply(lambda g: genre in g)].index.tolist()

    if price_range:
        low, high = price_range
        filtered_indices = [i for i in filtered_indices if low <= game_df_selected.loc[i, 'price'] <= high]

    if min_rating:
        filtered_indices = [i for i in filtered_indices if game_df_selected.loc[i, 'ratings'] >= min_rating]

    if game_name:
        if game_name not in game_df_selected['name'].values:
            return f"Game '{game_name}' tidak ditemukan."
        idx = game_df_selected[game_df_selected['name'] == game_name].index[0]
        query_vec = game_embeddings[idx].reshape(1, -1)
    else:
        if not filtered_indices:
            return "Tidak ada game yang cocok dengan kriteria."
        query_vec = game_embeddings[filtered_indices].mean(axis=0).reshape(1, -1)

    sim_scores = cosine_similarity(query_vec, game_embeddings)[0]
    top_indices = np.argsort(sim_scores)[::-1]

    top_filtered = [i for i in top_indices if i in filtered_indices][:top_k]
    return game_df_selected.iloc[top_filtered][['name', 'genres', 'price', 'ratings']]

"""Berdasarkan nama"""

recommend(game_name="Counter-Strike")

"""berdasarkan genre"""

recommend(genre="Action")

"""berdasarkan rating dan harga"""

recommend(price_range=(0, 10), min_rating=0.9)

"""Precision@K Evaluation"""

def precision_at_k(game_index, top_k=20):
    query_vec = game_embeddings[game_index].reshape(1, -1)
    sim_scores = cosine_similarity(query_vec, game_embeddings)[0]
    top_indices = np.argsort(sim_scores)[::-1][1:top_k+1]

    target_tags = set(game_df_selected.iloc[game_index]['steamspy_tags'])
    hits = 0
    for idx in top_indices:
        recommended_tags = set(game_df_selected.iloc[idx]['steamspy_tags'])
        if len(target_tags & recommended_tags) > 0:
            hits += 1
    return hits / top_k

"""Evaluasi rata-rata precision@20 untuk 100 sample"""

sample_indices = np.random.choice(game_df_selected.index, size=1000, replace=False)
avg_precision = np.mean([precision_at_k(i, top_k=20) for i in sample_indices])
print(f"Average Precision@10: {avg_precision:.4f}")